package pt.tecnico.bubbledocs.domain;

class BubbleDocs {
  int idGlobal;
}

class User {
  int id;
  String username;
  String name;
  String password;
}

class Spreadsheet {
  int id;
  String name;
  DateTime date;
  int nRows;
  int nCols;
}

class Permission {
  boolean rw;
}

class Cell {
  int row;
  int collumn;
  boolean wProtected;
}

class Content;

class Range;

class Root extends User;

class Reference extends Content;

class Literal extends Content {
  int val;
}

class Function extends Content;

class Unary extends Function;

class Binary extends Function;

class Avg extends Unary;

class Prd extends Unary;

class Add extends Binary;

class Sub extends Binary;

class Mul extends Binary;

class Div extends Binary;

relation DomainRootHasBubbleDocsApplication {
  .pt.ist.fenixframework.DomainRoot playsRole root {
    multiplicity  0..1;
  }
  BubbleDocs playsRole bubbledocs {
    multiplicity 0..1;
  } 
}

relation BubbleDocsContainsUsers {
  BubbleDocs playsRole bubbledocs;
  User playsRole users {
    multiplicity *;
}
}

relation BubbleDocsContainsSpreadsheets {
  BubbleDocs playsRole bubbledocs;
  Spreadsheet playsRole spreadsheets {
    multiplicity *;
  }
}

relation UserHasSpreadsheets {
  User playsRole user;
  Spreadsheet playsRole spreadsheets {
    multiplicity *;
  }
}

relation UserHasPermission {
  User playsRole user;
  Permission playsRole permission;
}

relation SpreadsheetHasPermissions {
  Spreadsheet playsRole spreadsheet;
  Permission playsRole permissions {
    multiplicity *;
  }
}

relation SpreadsheetHasCells {
  Spreadsheet playsRole spreadsheet;
  Cell playsRole cells {
    multiplicity *;
  }
}

relation CellHasContent {
  Cell playsRole cell;
  Content playsRole content;
}

relation RangeHasCells{
  Range playsRole range;
  Cell playsRole cells {
    multiplicity *;
  }
}

relation UnaryHasRange {
  Range playsRole range;
  Unary playsRole unary;
}

relation BinaryHasReferences {
  Binary playsRole binary;
  Reference playsRole references {
    multiplicity 0..2;
  }
}

relation BinaryHasLiterals {
  Binary playsRole binary;
  Literal playsRole literals {
    multiplicity 0..2;
  }
}
 